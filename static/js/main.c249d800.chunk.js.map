{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,6MCgD5BC,MA1Cf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAGxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAEnC,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KAEZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAIjD,8BAEI,kBAAC,IAAD,CAAiBD,UAAU,SAASU,KAAK,QACrCC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAQ1D,OAEI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAE3BlB,K,eCjCjBmB,IAAQC,IAAIC,K,IAkFGC,E,kDA/EX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTtB,MAAO,GACPuB,YAAa,CACTf,KAAM,GACNJ,IAAI,KAGZ,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZF,E,wDAcPf,GACRiB,KAAKC,SAAS,CACVL,YAAa,CACTf,KAAME,EAAEE,OAAOL,MACfH,IAAKyB,KAAKC,W,8BAMdpB,GACJA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACS,KAAjBA,EAAQxB,KAAa,CACrB,IAAM2B,EAAQ,sBAAOR,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACV5B,MAAOmC,EACPZ,YAAa,CACTf,KAAM,GACNJ,IAAI,S,iCAKTA,GACP,IAAMgC,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAC9CA,EAAKE,MAAQA,KACjBuB,KAAKC,SAAS,CACV5B,MAAMoC,M,gCAGJ5B,EAAMJ,GACZ,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACFA,EAAKE,MAAQA,IACbF,EAAKM,KAAOA,MAGpBmB,KAAKC,SAAS,CACV5B,MAAOA,M,+BAKX,OACI,yBAAKG,UAAU,OACX,gCACI,0BAAMG,GAAG,aAAagC,SAAUX,KAAKD,SACjC,2BAAOrB,KAAK,OAAOkC,YAAY,aAC3BhC,MAAOoB,KAAKL,MAAMC,YAAYf,KAC9BC,SAAUkB,KAAKH,cACnB,4BAAQnB,KAAK,UAAb,WAGR,kBAAC,EAAD,CAAWL,MAAO2B,KAAKL,MAAMtB,MACzBe,WAAYY,KAAKZ,WACjBJ,UAAWgB,KAAKhB,iB,GAxElB6B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c249d800.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n\r\n    {\r\n        return <div className=\"list\" key={item.key}>\r\n\r\n            <p>\r\n                <input type=\"text\"\r\n                    id={item.key}\r\n                    value={item.text}\r\n                \r\n                    onChange={\r\n                        (e) => {\r\n                            props.setUpdate(e.target.value, item.key)\r\n                        }\r\n                    }\r\n                />\r\n                <span>\r\n\r\n                    <FontAwesomeIcon className=\"faicon\" icon='trash'\r\n                        onClick={ () => props.deleteItem(item.key)\r\n\r\n                        }/>\r\n                </span></p>\r\n            \r\n        </div>\r\n    })\r\n\r\n    return (\r\n\r\n        <div>\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n\r\n                {listItems}\r\n            </FlipMove>\r\n            </div>\r\n\r\n    )\r\n\r\n     \r\n}\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            currentItem: {\r\n                text: '',\r\n                key:''\r\n            }\r\n        }\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.setUpdate = this.setUpdate.bind(this);\r\n    }\n    handleInput(e) {\n        this.setState({\r\n            currentItem: {\r\n                text: e.target.value,\r\n                key: Date.now()\r\n\r\n            }\r\n         })\r\n    }\n\n    addItem(e) {\n        e.preventDefault();\r\n        const newItem = this.state.currentItem;\r\n        console.log(newItem);\r\n        if (newItem.text !== \"\") {\r\n            const newItems = [...this.state.items, newItem];\r\n            this.setState({\r\n                items: newItems,\r\n                currentItem: {\r\n                    text: '',\r\n                    key:''\r\n                }\r\n            })\r\n        }\r\n        }\r\n    deleteItem(key) {\n        const filteredItems = this.state.items.filter(item =>\r\n            item.key !== key);\r\n        this.setState({\r\n            items:filteredItems\r\n        })\r\n    }\n    setUpdate(text, key) {\n        const items = this.state.items;\r\n        items.map(item => {\r\n            if (item.key === key) {\r\n                item.text = text;\r\n            }\r\n        })\r\n        this.setState({\r\n            items: items\r\n        })\r\n\r\n    }\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header>\r\n                    <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n                        <input type=\"text\" placeholder=\"Enter Text\"\r\n                            value={this.state.currentItem.text}\r\n                            onChange={this.handleInput} />\r\n                        <button type=\"submit\"> Add </button>\r\n                    </form>\r\n                </header>\r\n                <ListItems items={this.state.items}\r\n                    deleteItem={this.deleteItem}\r\n                    setUpdate={this.setUpdate} ></ListItems>\r\n            \r\n            </div>\r\n\r\n        );\r\n    }\r\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}